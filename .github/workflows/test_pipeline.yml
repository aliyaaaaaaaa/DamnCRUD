name: CI/CD Pipeline with Selenium and DAST

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      
      # Tambahkan langkah untuk membuat apache-config.conf jika diperlukan
      - name: Create Apache Config
        run: |
          echo '<VirtualHost *:80>
              ServerAdmin webmaster@localhost
              DocumentRoot /var/www/html
              
              <Directory /var/www/html>
                  Options Indexes FollowSymLinks
                  AllowOverride All
                  Require all granted
              </Directory>
              
              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>' > apache-config.conf

      - name: Set up Docker Compose
        run: |
          docker compose up -d
          
          # Pastikan container my_app tetap berjalan
          #docker exec my_app tail -f /dev/null &
          docker exec my_app nohup php -S 0.0.0.0:8000 -t /var/www/html &

          docker ps -a
          
          # Install Chrome dan dependensi
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y wget gnupg
          docker exec my_app wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | docker exec -i my_app apt-key add -
          docker exec my_app bash -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y google-chrome-stable

      #- name: Check Container Status
       # run: |
        #  echo "Checking container status..."
         # docker ps -a
          #docker logs my_app

     # - name: Ensure Container is Running
      #  run: |
       #   if ! docker ps | grep -q my_app; then
        #    echo "Container my_app is not running. Starting it..."
         #   docker start my_app || docker compose up -d my_app
          #  sleep 5
          #fi

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          until docker exec my_db mysqladmin ping -h127.0.0.1 -uroot -proot --silent; do
            sleep 2
            echo "Still waiting for MySQL..."
          done
          echo "MySQL is ready!"

      - name: Import Database
        run: |
          docker exec -i my_db mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS damncrud;"
          docker exec -i my_db mysql -u root -proot damncrud < db/damncrud.sql

      - name: Install Python and Dependencies in App Container
        run: |
          docker exec my_app apt-get install -y python3 python3-pip
          docker exec my_app pip3 install pytest pytest-xdist selenium webdriver-manager pymysql

      - name: Wait for Web App to be ready
        run: |
          echo "Waiting for the web application to be ready..."
          until curl -s http://localhost:8000; do
            sleep 2
            echo "Still waiting for the web application..."
          done
          echo "Web application is ready!"

      - name: Run Selenium Tests
        run: |
          docker exec -w /var/www/html my_app python3 -m pytest -n auto test_damncrud.py -v

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:8000"
          fail_action: true

