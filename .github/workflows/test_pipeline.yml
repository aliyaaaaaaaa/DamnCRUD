name: CI/CD Pipeline with Selenium and DAST

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Set up Docker Compose
        run: |
          docker compose up -d
          
          # Pastikan container my_app tetap berjalan
          #docker exec my_app tail -f /dev/null &
          #docker exec my_app nohup php -S 0.0.0.0:8000 -t /var/www/html &

          docker ps -a
          
          # Install Chrome dan dependensi
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y wget gnupg
          docker exec my_app wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | docker exec -i my_app apt-key add -
          docker exec my_app bash -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y google-chrome-stable

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          until docker exec my_db mysqladmin ping -h127.0.0.1 -uroot -proot --silent; do
            sleep 2
            echo "Still waiting for MySQL..."
          done
          echo "MySQL is ready!"

      - name: Import Database
        run: |
          docker exec -i my_db mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS damncrud;"
          docker exec -i my_db mysql -u root -proot damncrud < db/damncrud.sql

      - name: Install Python and Dependencies in App Container
        run: |
          docker exec my_app apt-get install -y python3 python3-pip
          docker exec my_app pip3 install pytest pytest-xdist selenium webdriver-manager pymysql
          
      - name: Wait for Web App to be ready
        run: |
          echo "Waiting for the web application to be ready..."
          until docker exec my_app curl -s http://localhost:8000; do
            sleep 2
            echo "Still waiting for the web application..."
          done
          echo "Web application is ready!"

      - name: Check my_app and db connection
        run: |
          echo "Checking connection between my_app and db..."
          until docker exec my_db mysql -h db -u root -proot -e "SELECT 1" --silent; do
            sleep 2
            echo "Still waiting for the database connection..."
          done
          echo "Database connection successful!"
          
      - name: Checking active docker container
        run: docker ps

      - name: Run Selenium Tests
        run: |
          docker exec -w /var/www/html my_app python3 -m pytest -n auto test_damncrud.py -v

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:8000"
          fail_action: true

