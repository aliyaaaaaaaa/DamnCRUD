name: CI/CD Pipeline with Selenium and DAST

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          until docker exec my_db mysqladmin ping -h127.0.0.1 -uroot -proot --silent; do
            sleep 2
            echo "Masih menunggu MySQL..."
          done
          echo "MySQL siap!"

      - name: Import Database
        run: |
          docker exec -i my_db mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS damncrud;"
          docker exec -i my_db mysql -u root -proot damncrud < db/damncrud.sql

      - name: Copy Test Files to App Container
        run: |
          # Kita tidak perlu copy test_damncrud.py karena sudah di-mount lewat volume
          # Tapi kita perlu mengubah koneksi database di dalam test file
          docker exec my_app sed -i 's/host="localhost"/host="db"/g' /var/www/html/test_damncrud.py
          
      - name: Install Chrome in Container
        run: |
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y wget gnupg
          docker exec my_app wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | docker exec -i my_app apt-key add -
          docker exec my_app echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | docker exec -i my_app tee /etc/apt/sources.list.d/google-chrome.list
          docker exec my_app apt-get update
          docker exec my_app apt-get install -y google-chrome-stable

      - name: Install Python and Dependencies in Container
        run: |
          docker exec my_app apt-get install -y python3 python3-pip
          docker exec my_app pip3 install pytest pytest-xdist selenium webdriver-manager pymysql

      - name: Wait for Web App to be ready
        run: |
          echo "Menunggu aplikasi web siap..."
          sleep 10
          docker exec my_app curl -s http://localhost:8000 || echo "Web service belum siap, tapi lanjutkan..."
          
      - name: Run Pytest Tests in Container
        run: |
          docker exec -w /var/www/html my_app python3 -m pytest -n auto test_damncrud.py -v

  dast_scan:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:8000"
          fail_action: true
